-- 基本PostgreSQL设置
SET statement_timeout = 0;             -- 设置SQL语句超时时间为无限
SET lock_timeout = 0;                  -- 设置锁定超时时间为无限
SET idle_in_transaction_session_timeout = 0;  -- 设置空闲事务会话超时时间为无限
SET client_encoding = 'UTF8';          -- 设置客户端编码为UTF8
SET standard_conforming_strings = on;  -- 启用标准符合字符串
SELECT pg_catalog.set_config('search_path', '', false);  -- 清空搜索路径
SET check_function_bodies = false;     -- 不检查函数体
SET xmloption = content;               -- XML选项设置为content
SET client_min_messages = warning;     -- 客户端最小消息级别设置为warning
SET row_security = off;                -- 关闭行级安全性

-- 创建各种扩展
CREATE EXTENSION IF NOT EXISTS "pgsodium" WITH SCHEMA "pgsodium";  -- 安全扩展

-- 为public模式添加注释
COMMENT ON SCHEMA "public" IS 'standard public schema';

-- 创建GraphQL扩展
CREATE EXTENSION IF NOT EXISTS "pg_graphql" WITH SCHEMA "graphql";

-- 创建数据库统计信息扩展
CREATE EXTENSION IF NOT EXISTS "pg_stat_statements" WITH SCHEMA "extensions";

-- 创建加密扩展
CREATE EXTENSION IF NOT EXISTS "pgcrypto" WITH SCHEMA "extensions";

-- 创建JWT扩展
CREATE EXTENSION IF NOT EXISTS "pgjwt" WITH SCHEMA "extensions";

-- 创建Supabase保险库扩展
CREATE EXTENSION IF NOT EXISTS "supabase_vault" WITH SCHEMA "vault";

-- 创建UUID扩展
CREATE EXTENSION IF NOT EXISTS "uuid-ossp" WITH SCHEMA "extensions";

-- 定义处理新用户的函数
CREATE OR REPLACE FUNCTION "public"."handle_new_user"() RETURNS "trigger"
    LANGUAGE "plpgsql" SECURITY DEFINER
    SET "search_path" TO 'public'
    AS $$
begin
  -- 当创建新的auth用户时，自动在public.users表中创建对应记录
  insert into public.users (id, name, email)
  values (new.id, new.raw_user_meta_data ->> 'name', new.email);
  return new;
end;
$$;

-- 设置函数所有者
ALTER FUNCTION "public"."handle_new_user"() OWNER TO "postgres";

-- 设置默认表空间和表访问方法
SET default_tablespace = '';
SET default_table_access_method = "heap";

-- 创建评论表
CREATE TABLE IF NOT EXISTS "public"."comments" (
    "id" bigint NOT NULL,                                       -- 评论ID
    "created_at" timestamp with time zone DEFAULT "now"() NOT NULL,  -- 创建时间
    "text" "text",                                              -- 评论内容
    "userId" "uuid",                                            -- 评论用户ID
    "postId" bigint                                             -- 关联的帖子ID
);

-- 设置评论表所有者
ALTER TABLE "public"."comments" OWNER TO "postgres";

-- 设置评论表ID为自增列
ALTER TABLE "public"."comments" ALTER COLUMN "id" ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME "public"."comments_id_seq"
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);

-- 创建通知表
CREATE TABLE IF NOT EXISTS "public"."notifications" (
    "id" bigint NOT NULL,                                       -- 通知ID
    "created_at" timestamp with time zone DEFAULT "now"() NOT NULL,  -- 创建时间
    "title" "text",                                             -- 通知标题
    "senderId" "uuid",                                          -- 发送者ID
    "receiverId" "uuid",                                        -- 接收者ID
    "data" "text"                                               -- 通知数据
);

-- 设置通知表所有者
ALTER TABLE "public"."notifications" OWNER TO "postgres";

-- 设置通知表ID为自增列
ALTER TABLE "public"."notifications" ALTER COLUMN "id" ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME "public"."notifications_id_seq"
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);

-- 创建帖子点赞表
CREATE TABLE IF NOT EXISTS "public"."postLikes" (
    "id" bigint NOT NULL,                                       -- 点赞ID
    "created_at" timestamp with time zone DEFAULT "now"() NOT NULL,  -- 创建时间
    "postId" bigint,                                            -- 帖子ID
    "userId" "uuid"                                             -- 用户ID
);

-- 设置帖子点赞表所有者
ALTER TABLE "public"."postLikes" OWNER TO "postgres";

-- 设置帖子点赞表ID为自增列
ALTER TABLE "public"."postLikes" ALTER COLUMN "id" ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME "public"."postLikes_id_seq"
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);

-- 创建帖子表
CREATE TABLE IF NOT EXISTS "public"."posts" (
    "id" bigint NOT NULL,                                       -- 帖子ID
    "created_at" timestamp with time zone DEFAULT "now"() NOT NULL,  -- 创建时间
    "body" "text",                                              -- 帖子内容
    "file" "text",                                              -- 附件文件路径
    "userId" "uuid"                                             -- 发帖用户ID
);

-- 设置帖子表所有者
ALTER TABLE "public"."posts" OWNER TO "postgres";

-- 设置帖子表ID为自增列
ALTER TABLE "public"."posts" ALTER COLUMN "id" ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME "public"."posts_id_seq"
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);

-- 创建用户表
CREATE TABLE IF NOT EXISTS "public"."users" (
    "id" "uuid" DEFAULT "gen_random_uuid"() NOT NULL,           -- 用户ID
    "created_at" timestamp with time zone DEFAULT "now"() NOT NULL,  -- 创建时间
    "name" "text",                                              -- 用户名
    "image" "text",                                             -- 用户头像
    "bio" "text",                                               -- 用户简介
    "email" "text",                                             -- 用户邮箱
    "address" "text",                                           -- 用户地址
    "phoneNumber" "text"                                        -- 电话号码
);



-- 设置用户表所有者
ALTER TABLE "public"."users" OWNER TO "postgres";

-- 添加主键约束
ALTER TABLE ONLY "public"."comments"
    ADD CONSTRAINT "comments_pkey" PRIMARY KEY ("id");          -- 评论表主键

ALTER TABLE ONLY "public"."notifications"
    ADD CONSTRAINT "notifications_pkey" PRIMARY KEY ("id");     -- 通知表主键

ALTER TABLE ONLY "public"."postLikes"
    ADD CONSTRAINT "postLikes_pkey" PRIMARY KEY ("id");         -- 点赞表主键

ALTER TABLE ONLY "public"."posts"
    ADD CONSTRAINT "posts_pkey" PRIMARY KEY ("id");             -- 帖子表主键

ALTER TABLE ONLY "public"."users"
    ADD CONSTRAINT "users_pkey" PRIMARY KEY ("id");             -- 用户表主键

-- 添加外键约束
ALTER TABLE ONLY "public"."comments"
    ADD CONSTRAINT "comments_postId_fkey" FOREIGN KEY ("postId") REFERENCES "public"."posts"("id") ON DELETE SET NULL;  -- 评论关联帖子

ALTER TABLE ONLY "public"."comments"
    ADD CONSTRAINT "comments_userId_fkey" FOREIGN KEY ("userId") REFERENCES "public"."users"("id") ON DELETE SET NULL;  -- 评论关联用户

ALTER TABLE ONLY "public"."notifications"
    ADD CONSTRAINT "notifications_receiverId_fkey" FOREIGN KEY ("receiverId") REFERENCES "public"."users"("id") ON DELETE SET NULL;  -- 通知接收者

ALTER TABLE ONLY "public"."notifications"
    ADD CONSTRAINT "notifications_senderId_fkey" FOREIGN KEY ("senderId") REFERENCES "public"."users"("id") ON DELETE SET NULL;  -- 通知发送者

ALTER TABLE ONLY "public"."postLikes"
    ADD CONSTRAINT "postLikes_postId_fkey" FOREIGN KEY ("postId") REFERENCES "public"."posts"("id") ON DELETE SET NULL;  -- 点赞关联帖子

ALTER TABLE ONLY "public"."postLikes"
    ADD CONSTRAINT "postLikes_userId_fkey" FOREIGN KEY ("userId") REFERENCES "public"."users"("id") ON DELETE SET NULL;  -- 点赞关联用户

ALTER TABLE ONLY "public"."posts"
    ADD CONSTRAINT "posts_userId_fkey" FOREIGN KEY ("userId") REFERENCES "public"."users"("id") ON DELETE SET NULL;  -- 帖子关联用户

-- 创建访问策略
-- 为已认证用户启用帖子点赞的读取权限
CREATE POLICY "Enable read access  on post likes for all users" ON "public"."postLikes" TO "authenticated" USING (true);

-- 为已认证用户启用通知的读取权限
CREATE POLICY "Enable read access for all users" ON "public"."notifications" TO "authenticated" USING (true);

-- 为已认证用户启用帖子的读取权限
CREATE POLICY "Enable read access for all users" ON "public"."posts" TO "authenticated" USING (true);

-- 为已认证用户启用用户信息的读取权限
CREATE POLICY "Enable read access for all users" ON "public"."users" TO "authenticated" USING (true);

-- 为已认证用户启用评论的读取权限
CREATE POLICY "Enable read access for all users for comments" ON "public"."comments" TO "authenticated" USING (true);

-- 启用表的行级安全性
ALTER TABLE "public"."comments" ENABLE ROW LEVEL SECURITY;
ALTER TABLE "public"."notifications" ENABLE ROW LEVEL SECURITY;
ALTER TABLE "public"."postLikes" ENABLE ROW LEVEL SECURITY;
ALTER TABLE "public"."posts" ENABLE ROW LEVEL SECURITY;
ALTER TABLE "public"."users" ENABLE ROW LEVEL SECURITY;

-- 设置Supabase实时功能
ALTER PUBLICATION "supabase_realtime" OWNER TO "postgres";

-- 将表添加到实时功能
ALTER PUBLICATION "supabase_realtime" ADD TABLE ONLY "public"."comments";
ALTER PUBLICATION "supabase_realtime" ADD TABLE ONLY "public"."notifications";
ALTER PUBLICATION "supabase_realtime" ADD TABLE ONLY "public"."posts";

-- 授予Schema权限
GRANT USAGE ON SCHEMA "public" TO "postgres";
GRANT USAGE ON SCHEMA "public" TO "anon";
GRANT USAGE ON SCHEMA "public" TO "authenticated";
GRANT USAGE ON SCHEMA "public" TO "service_role";

-- 授予用户函数权限
GRANT ALL ON FUNCTION "public"."handle_new_user"() TO "anon";
GRANT ALL ON FUNCTION "public"."handle_new_user"() TO "authenticated";
GRANT ALL ON FUNCTION "public"."handle_new_user"() TO "service_role";

-- 授予评论表权限
GRANT ALL ON TABLE "public"."comments" TO "anon";
GRANT ALL ON TABLE "public"."comments" TO "authenticated";
GRANT ALL ON TABLE "public"."comments" TO "service_role";

GRANT ALL ON SEQUENCE "public"."comments_id_seq" TO "anon";
GRANT ALL ON SEQUENCE "public"."comments_id_seq" TO "authenticated";
GRANT ALL ON SEQUENCE "public"."comments_id_seq" TO "service_role";

-- 授予通知表权限
GRANT ALL ON TABLE "public"."notifications" TO "anon";
GRANT ALL ON TABLE "public"."notifications" TO "authenticated";
GRANT ALL ON TABLE "public"."notifications" TO "service_role";

GRANT ALL ON SEQUENCE "public"."notifications_id_seq" TO "anon";
GRANT ALL ON SEQUENCE "public"."notifications_id_seq" TO "authenticated";
GRANT ALL ON SEQUENCE "public"."notifications_id_seq" TO "service_role";

-- 授予点赞表权限
GRANT ALL ON TABLE "public"."postLikes" TO "anon";
GRANT ALL ON TABLE "public"."postLikes" TO "authenticated";
GRANT ALL ON TABLE "public"."postLikes" TO "service_role";

GRANT ALL ON SEQUENCE "public"."postLikes_id_seq" TO "anon";
GRANT ALL ON SEQUENCE "public"."postLikes_id_seq" TO "authenticated";
GRANT ALL ON SEQUENCE "public"."postLikes_id_seq" TO "service_role";

-- 授予帖子表权限
GRANT ALL ON TABLE "public"."posts" TO "anon";
GRANT ALL ON TABLE "public"."posts" TO "authenticated";
GRANT ALL ON TABLE "public"."posts" TO "service_role";

GRANT ALL ON SEQUENCE "public"."posts_id_seq" TO "anon";
GRANT ALL ON SEQUENCE "public"."posts_id_seq" TO "authenticated";
GRANT ALL ON SEQUENCE "public"."posts_id_seq" TO "service_role";

-- 授予用户表权限
GRANT ALL ON TABLE "public"."users" TO "anon";
GRANT ALL ON TABLE "public"."users" TO "authenticated";
GRANT ALL ON TABLE "public"."users" TO "service_role";

-- 设置默认权限 - 序列
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON SEQUENCES  TO "postgres";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON SEQUENCES  TO "anon";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON SEQUENCES  TO "authenticated";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON SEQUENCES  TO "service_role";

-- 设置默认权限 - 函数
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON FUNCTIONS  TO "postgres";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON FUNCTIONS  TO "anon";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON FUNCTIONS  TO "authenticated";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON FUNCTIONS  TO "service_role";

-- 设置默认权限 - 表
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON TABLES  TO "postgres";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON TABLES  TO "anon";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON TABLES  TO "authenticated";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON TABLES  TO "service_role";


-- 创建触发器 - 当创建新用户时自动执行handle_new_user函数
create trigger createAuthUser
  after insert on auth.users
  for each row execute procedure public.handle_new_user();


-- 删除触发器的注释代码（已被注释掉）
-- drop trigger createAuthUser on auth.users;


-- 创建存储桶并设置访问策略
-- 创建名为'uploads'的公共存储桶
INSERT INTO STORAGE.buckets (id, name, public) VALUES('uploads', 'uploads', TRUE);

-- 为已认证用户设置存储对象的SELECT权限
CREATE POLICY "allow all 1va6avm_0" ON storage.objects FOR SELECT TO authenticated USING (bucket_id = 'uploads');

-- 为已认证用户设置存储对象的INSERT权限
CREATE POLICY "allow all 1va6avm_1" ON storage.objects FOR INSERT TO authenticated WITH CHECK (bucket_id = 'uploads');

-- 为已认证用户设置存储对象的UPDATE权限
CREATE POLICY "allow all 1va6avm_2" ON storage.objects FOR UPDATE TO authenticated USING (bucket_id = 'uploads');

-- 为已认证用户设置存储对象的DELETE权限
CREATE POLICY "allow all 1va6avm_3" ON storage.objects FOR DELETE TO authenticated USING (bucket_id = 'uploads');

-- 重置所有设置
RESET ALL; 